#!/usr/bin/env ruby
# begin # XXX: Remove this begin/rescue before distributing your app
 require 'banalize'
# rescue LoadError
#   STDERR.puts "In development, you need to use `bundle exec bin/Banalize` to run your app"
#   STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
#   STDERR.puts "Feel free to remove this message from bin/Banalize now"
#   exit 64
# end

#require_relative File.dirname(File.dirname(__FILE__))

include GLI::App
commands_from "commands"

program_desc <<-EOF 

Banalize is Bash files static code analyzer. It runs each policy
corresponding to the required level of test severity and policies. 

Policies are Ruby or other programming languages (Bash, perl)
executable scripts located in `lib/policies` directories.

EOF


version Banalize::VERSION



desc 'Use only policies included in specified group'
# default_value 'core'
flag [:group, :g]


desc 'Policies of specified severity and above'
flag [:severity, :s]

desc 'Single policy only by name'
flag [:policy, :p]

desc "Turn on colored output"
switch [:color, :c]

pre do |global,command,options,args|

  $color = true if global[:color]
  
  search = { } 

  if global[:policy]
    search = global[:policy]

  else
    search.merge!({ :policy   => global[:group]         }) if global[:group]
    search.merge!({ :severity => global[:severity].to_i }) if global[:severity]
  end

  $search   = search
  $policies = Banalize::Policy.search search 

  # - results of checks
  # - count of failed checks
  # - total count of checks
  $res, $status, $total = { }, 0, 0
  true
end

post do |global,command,options,args|
  #
  # output results of the check
  #
  unless $res.empty?

    if options[:dots]
      dots = ''
      $res.each do |file,res|
        $total += res.count
        res.each do |k,v|
          dots << (v[:status] ? '.' : "F".color(:red))
          $status += 1 unless v[:status]
        end
      end
      puts dots

    else
      out = { }
      $res.each do |file,res|

        failure = res.select { |k,v| !v[:status] }

        # Ignore all other keys, only bring messages up. If no errors
        # switch is set. only list empty policy names
        failure.map do |k,v|
          failure[k] = options[:errors] ? v[:messages]  : nil
        end

        out[file] = { "Fail" => failure }

        out[file].merge!({ "Success" => res.keys.select { |k| res[k][:status] } }) if options[:all]

        $total  += res.count
        $status += failure.count
      end

      print  beatify(out)
    end
    
    puts "\n#{$res.count} files, #{$total.to_s} checks, #{$status.to_s} failed"
  end

  $status
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

##
# Make ouput text indented and apply colors to it if this is required
# 
# @param [Hash] hash check result hash
# @param [String] indent Default indent 4 spaces for each level
#
def beatify hash, indent='    '
  out = ''
  l1 = "\n"+indent
  l2 = "\n" << indent*2
  l3 = "\n" << indent*2 << "## "

  hash.each do |file,results|
    out << "\n\n#{file.color(:file)}"

    results.each do |f_or_s, checks|

      
      out << l1 << f_or_s << l1 << '-'*10

      checks.each do |policy, string|
        out << l1 << policy.to_s.color(f_or_s == 'Fail' ? :red : :yellow)
        if string
          lines = case string
                  when String
                    string.split("\n")
                  when Array
                    string
                  end
          lines.each do |line| 
            line.gsub!(/(line \d+:)(.*)/, '\1' +"#{l3}    "+ '\2' )
            out << l3 << line
          end

        end
      end
    end
    
  end
  out
end

##
# Extend class String with color codes
class String
  def color type
    return self unless $color
    color_code = case type
                 when :bold             then 1
                 when :white, :file     then 37
                 when :error, :red      then 31
                 when :green            then 32
                 when :policy, :yellow  then 33
                 end
    "\e[#{color_code}m#{self}\e[0m"
  end
end

exit run(ARGV) && $status == 0

